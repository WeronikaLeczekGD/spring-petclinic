
cache:
  paths:
    - ~/.m2/repository/

stages:          # List of stages for jobs, and their order of execution
  - check
  - test
  - build
  - deploy




maven-check:
  stage: check
  image: maven:3.6.3-jdk-11
  script:
    - mvn checkstyle:checkstyle
  artifacts:
    paths:
      - target/

.maven-test:
    stage: test
    image: maven:3.6.3-jdk-11
    script:
        - mvn test
    artifacts:
        paths:
        - target/


maven-build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: maven:3.8.5-openjdk-17
  script:
    - echo "Compiling the code..."
    - mvn package
  artifacts:
    paths:
      - target/*.jar

deploy-job:      # This job runs in the deploy stage.
  image: docker:20.10.16
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  services:
    - name: docker:dind
  script:
   - docker build -t wleczek/mr:$CI_COMMIT_SHORT_SHA .  #repository mr
   - docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN $CI_REGISTRY #When a pipeline job is about to run, GitLab generates a unique token and injects it as the CI_JOB_TOKEN predefined variable.
   - docker push wleczek/mr:$CI_COMMIT_SHORT_SHA



#maven-chechstyle:
#  stage: Checkstyle
#  script: mvn checkstyle:checkstyle

#maven-test:
#  stage: Test
#  script: mvn test
#
#maven-build:
#    stage: Build
#    script: mvn package -DskipTests=true
#
#
#docker-build:
#  stage: Build Docker Image
#  image: docker:20.10.16
#  services:
#    - docker:dind
#  script:
#    - docker build -t wleczek/mr:$CI_COMMIT_SHORT_SHA .  #repository mr
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY #When a pipeline job is about to run, GitLab generates a unique token and injects it as the CI_JOB_TOKEN predefined variable.
#    - docker push wleczek/mr:$CI_COMMIT_SHORT_SHA
#
